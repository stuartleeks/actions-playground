name: pr_comment_bot

on:
  issue_comment:
    types: [created]

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issue_comment
# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue_comment


# https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs

jobs:

  pr_commented:
    name: PR comment
    # https://docs.github.com/en/graphql/reference/enums#commentauthorassociation
    # (and https://docs.github.com/en/rest/reference/issues#comments)
    if: ${{ github.event.issue.pull_request && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR') }}
    runs-on: ubuntu-latest
    outputs:
      command: ${{ steps.check_command.outputs.result }}
      prRepo: ${{ steps.get_pr_details.outputs.prRepo }}
      prRef: ${{ steps.get_pr_details.outputs.prRef }}
      potentialMergeCommit: ${{ steps.get_pr_details.outputs.potentialMergeCommit }}
      not-md: ${{ steps.filter.outputs.not-md }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - id: check_command
        name: Check for a command using GitHub script
        uses: actions/github-script@v6
        env:
          SOMETHING_SECRET: ${{ secrets.SOMETHING_SECRET }}
        with:
          result-encoding: string
          script: |
            const script = require('./.github/workflows/check_command.js')
            const result = await script.getCommand({core, context, github});
            console.log(result);
            return result;

      - name: Check Command output
        run: |
          echo "hi"
          echo "testOutput1: ${{ steps.check_command.outputs.testOutput1 }}"
          echo "testOutput2: ${{ steps.check_command.outputs.testOutput2 }}"
          echo "prRefId: ${{ steps.check_command.outputs.prRefId }}"

      - name: Check Command output
        if: ${{ steps.check_command.outputs.testOutput1 }}
        run: |
          echo "hi - testing whether the output is a boolean!"

      - name: Show result
        env:
          RUN_SOMETHING: ${{ steps.check_command.outputs.runSomething }}
          TEST: ${{ format('fmt-{0}-string', 
                      'value-here') }}
        run: |
          echo "hi"
          echo "env var: ${RUN_SOMETHING}"
          echo "env var - test: ${TEST}"
          echo "output: ${{ steps.check_command.outputs.runSomething }}"

      - name: Calcs
        id: calcs
        run: |
          echo "hi"
          echo "::set-output name=runSomething::true"

      - name: Show result2
        env:
          RUN_SOMETHING: ${{ steps.calcs.outputs.runSomething }}
        run: |
          echo "hi"
          echo "env var: ${RUN_SOMETHING}"
          echo "output: ${{ steps.calcs.outputs.runSomething }}"

      - name: Get ref
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.event.repository.full_name }}
          PR_NUMBER: ${{ github.event.issue.number }}
        run: |
          # REFID is the basis for the TRE_ID for the PR
          github_pr_ref="refs/pull/${PR_NUMBER}/merge"
          echo "::set-output name=ciGitRef::${github_pr_ref}"

          REFID=$(echo "${github_pr_ref}" | shasum | cut -c1-8)
          echo "using refid of: ${REFID} for GitHub Ref: ${github_pr_ref} (RG base name)"
          echo "::set-output name=refid::${REFID}"

          # Get the prMergeCommit as this is what the pull_request trigger would build
          prMergeRef=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json potentialMergeCommit | jq -r .potentialMergeCommit.oid)
          echo -e "\tprMergeRef: $prMergeRef"
          echo

          # Get PR HEAD SHA for checks status
          echo "Getting PR head SHA"
          PR_HEAD_SHA=$(gh api "/repos/$REPO/pulls/$PR_NUMBER" --jq .head.sha)
          echo "PR_HEAD_SHA: ${PR_HEAD_SHA}"
          echo "::set-output name=prHeadSha::${PR_HEAD_SHA}"

          # Also generate the REFID for the branch, but only if the headRepo is matches $REPO
          # This is used later in the destroy to destroy for the PR + branch
          pr_head_json=$(gh pr view "$PR_NUMBER" --repo "$REPO" --json headRefName,headRepositoryOwner,headRepository)
          pr_head_repo=$(echo "$pr_head_json" | jq -r '"\(.headRepositoryOwner.login)/\(.headRepository.name)"')
          if [[ "$pr_head_repo" == "$REPO" ]]; then
            github_branch_ref="refs/heads/$(echo "$pr_head_json" | jq -r '.headRefName')"
            BRANCH_REFID=$(echo "${github_branch_ref}" | shasum | cut -c1-8)
            echo "Using branch refid of $BRANCH_REFID for branch $github_branch_ref"
          else
            echo "Head repo is '$pr_head_repo' - skipping BRANCH_REFID"
            BRANCH_REFID=""
          fi
          echo "::set-output name=branchRefid::${BRANCH_REFID}"

      - name: Show Help
        if: ${{ steps.check_command.outputs.result == 'show-help' }}
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.event.repository.full_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Showing help on PR ${PR_NUMBER}"
          gh pr comment ${PR_NUMBER} \
            --repo $REPO \
            --body "Hello<br/><br/>You can use the following commands:<br/>    /test - run tests on a PR<br/>    /help - show this help"

      - id: get_pr_details
        name: Get PR details
        if: ${{ steps.check_command.outputs.result == 'run-tests' }}
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.event.repository.full_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Could look at moving this to GitHub Script action as well

          echo "Getting PR repo..."
          pr_owner=$(gh pr view $PR_NUMBER --repo $REPO --json headRepositoryOwner | jq -r .headRepositoryOwner.login)
          pr_repo=$(gh pr view $PR_NUMBER --repo $REPO --json headRepository | jq -r .headRepository.name)
          echo -e "\tPR from $pr_owner/$pr_repo"

          echo "Getting PR ref..."
          ref=$(gh pr view $PR_NUMBER --repo $REPO --json commits | jq -r ".[] | last | .oid")
          echo -e "\tLatest commit ref: $ref"
          echo

          potentialMergeCommit=$(gh pr view $PR_NUMBER --repo $REPO --json potentialMergeCommit | jq -r .potentialMergeCommit.oid)
          echo -e "\tpotentialMergeCommit: $potentialMergeCommit"
          echo


          echo "Setting outputs"
          echo "::set-output name=prRef::${ref}"
          echo "::set-output name=prRepo::${pr_owner}/${pr_repo}"
          echo "::set-output name=potentialMergeCommit::${potentialMergeCommit}"
          echo "Done"

          echo ${GITHUB_REF}

          echo "${PR_NUMBER}" > pr_number.txt

      # - name: potentialMergeCommit info
      #   run: |
      #     git show --no-patch --no-notes --pretty='%aD' ${{ steps.get_pr_details.outputs.potentialMergeCommit }}
      #     git show --no-patch --no-notes --pretty='%cD' ${{ steps.get_pr_details.outputs.potentialMergeCommit }}

      - uses: actions/upload-artifact@v3
        name: Add pr_number artifact
        with:
          name: pr_number
          path: pr_number.txt

      - name: Checkout
        if: |
          ${{ steps.check_command.outputs.result == 'run-tests'
              || steps.check_command.outputs.result == 'force-approve' }}
        uses: actions/checkout@v2
        with:
          # repository: ${{ steps.get_pr_details.outputs.prRepo }}
          # ref: ${{ steps.get_pr_details.outputs.prRef }}
          ref: ${{ steps.get_pr_details.outputs.potentialMergeCommit }}
          persist-credentials: false

      # - name: Checkout (CLI)
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     PR_REPO: ${{ steps.get_pr_details.outputs.prRepo }}
      #     PR_REF: ${{ steps.get_pr_details.outputs.potentialMergeCommit }}
      #     # PR_REF: ${{ steps.get_pr_details.outputs.prRef }}
      #   run: |
      #     #
      #     # NOTE: Here we are using the latest PR commit, i.e. we're not merging with main
      #     #       We could merge main (and even test if the PR is mergable before kicking off the run)
      #     #
      #     git status
      #     echo "-------------------------------------"
      #     git rev-parse HEAD
      #     git rev-parse --abbrev-ref HEAD
      #     echo "-------------------------------------"

      #     echo "Load PR code..."
      #     git config advice.detachedHead false
      #     git remote add fork https://github.com/${PR_REPO}
      #     git remote update
      #     git checkout ${PR_REF}


      #     echo "-------------------------------------"
      #     git status
      #     echo "-------------------------------------"
      #     git rev-parse HEAD
      #     git rev-parse --abbrev-ref HEAD

      - name: Test script
        run: |
          echo "running script..."
          scripts/test.sh
          echo "done"


      - name: Info
        run: |
          git status
          echo "-------------------------------------"
          git rev-parse --abbrev-ref HEAD

      - uses: dorny/paths-filter@v2
        id: filter
        if: |
          ${{ steps.check_command.outputs.result == 'run-tests' 
          || steps.check_command.outputs.result == 'force-approve' }}
        with:
          base: main
          ref: ${{ steps.get_pr_details.outputs.prRef }}
          filters: |
            not-md:
              # we need to check for changes in files other than *.md
              - '**/!(*.md)'

      - name: Path filter result
        run: |
          echo "not-md: ${{ steps.filter.outputs.not-md}}"

      - name: Comment with link to run
        if: ${{ steps.check_command.outputs.result == 'run-tests' }}
        env:
          PR_NUMBER: ${{ github.event.issue.number }}
          REPO: ${{ github.event.repository.full_name }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          RUN_ID: ${{ github.run_id }}
        run: |
          echo "Showing help on PR ${PR_NUMBER}"
          gh pr comment ${PR_NUMBER} --repo $REPO --body "Running tests: https://github.com/${REPO}/actions/runs/${RUN_ID}"

  debug:
    needs: [pr_commented]
    name: debug
    runs-on: ubuntu-latest
    steps:
      - name: Show result
        run: |
          echo "hi"
          echo "command: ${{ needs.pr_commented.outputs.command }}"
          echo "not-md: ${{ needs.pr_commented.outputs.not-md }}"

  run_test:
    needs: [pr_commented]
    if: ${{ needs.pr_commented.outputs.command == 'run-tests' && needs.pr_commented.outputs.not-md == 'true'}}
    name: Run deploy
    uses: ./.github/workflows/fake-extended-3.yml
    with:
      prRef: "refs/pull/${{ github.event.issue.number }}/merge"
      test1: something
      # prRef: ${{ needs.pr_commented.outputs.potentialMergeCommit }}
      # # prRef: ${{ needs.pr_commented.outputs.prRef }}
      # # prRepo: ${{ needs.pr_commented.outputs.prRepo }}
    secrets:
      SOMETHING_SECRET: ${{ secrets.SOMETHING_SECRET }}

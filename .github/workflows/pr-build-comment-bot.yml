name: pr_comment_bot

on:
  issue_comment:
    types: [created]

# https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#issue_comment
# https://docs.github.com/en/developers/webhooks-and-events/webhooks/webhook-events-and-payloads#issue_comment


# https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs

jobs:

  pr_commented:
    name: PR comment
    # https://docs.github.com/en/graphql/reference/enums#commentauthorassociation
    # (and https://docs.github.com/en/rest/reference/issues#comments)
    if: ${{ github.event.issue.pull_request && (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'COLLABORATOR') }}
    runs-on: ubuntu-latest
    outputs:
      command: ${{ steps.check_command.outputs.command }}
      prRepo: ${{ steps.check_command.outputs.prRepo }}
      prRef: ${{ steps.check_command.outputs.prRef }}
      prHeadSha: ${{ steps.check_command.outputs.prHeadSha }}
      potentialMergeCommit: ${{ steps.check_command.outputs.potentialMergeCommit }}
      nonDocsChanges: ${{ steps.filter.outputs.nonDocsChanges }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          persist-credentials: false

      - id: check_command
        name: Check for a command using GitHub script
        uses: actions/github-script@v6
        env:
          SOMETHING_SECRET: ${{ secrets.SOMETHING_SECRET }}
        with:
          script: |
            const script = require('./.github/workflows/build.js')
            await script.getCommandFromComment({core, context, github});
            
      - name: Env
        env:
          PR_NUMBER: ${{ github.event.pull_request.number }}
          PR_TITLE: ${{ github.event.pull_request.title }}
        run: printenv | sort

      - name: Context
        uses: actions/github-script@v6
        with:
          script: |
            console.log(context);

      - name: Check Command output
        run: |
          echo "hi"
          echo "testOutput1: ${{ steps.check_command.outputs.testOutput1 }}"
          echo "testOutput2: ${{ steps.check_command.outputs.testOutput2 }}"
          echo "prRefId: ${{ steps.check_command.outputs.prRefId }}"
          echo "prHeadSha: ${{ steps.check_command.outputs.prHeadSha }}"
          echo "result: ${{ steps.check_command.outputs.result }}"
          echo "command: ${{ steps.check_command.outputs.command }}"

      - name: Check condition
        if: ${{ steps.check_command.outputs.command == 'run-tests' && steps.check_command.outputs.nonDocsChanges == 'true' }}
        run: |
          echo "hi - testing whether the output is a boolean!"

      - name: Check Command output
        if: ${{ steps.check_command.outputs.testOutput1 }}
        run: |
          echo "hi - testing whether the output is a boolean!"

      - name: Show result
        env:
          RUN_SOMETHING: ${{ steps.check_command.outputs.runSomething }}
          TEST: ${{ format('fmt-{0}-string', 
                      'value-here') }}
        run: |
          echo "hi"
          echo "env var: ${RUN_SOMETHING}"
          echo "env var - test: ${TEST}"
          echo "output: ${{ steps.check_command.outputs.runSomething }}"

      # # If we don't run the actual deploy (see the run_test job below) we won't receive a check-run status,
      # # and will have to send it "manually"
      # - name: Bypass E2E check-runs status
      #   if: ${{ steps.check_command.outputs.command == 'test-force-approve' }}
      #   uses: LouisBrunner/checks-action@v1.1.1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     # the name must be identical to the one received by the real job
      #     sha: ${{ steps.check_command.outputs.prHeadSha }}
      #     name: "Deploy PR / Run E2E Tests (Smoke)"
      #     status: "completed"
      #     conclusion: "success"

      # # If we don't run the actual deploy (see the run_test job below) we won't receive a check-run status,
      # # and will have to send it "manually"
      # - name: Bypass E2E check-runs status
      #   if: ${{ steps.check_command.outputs.command == 'foo' }}
      #   uses: LouisBrunner/checks-action@v1.1.1
      #   with:
      #     token: ${{ secrets.GITHUB_TOKEN }}
      #     # the name must be identical to the one received by the real job
      #     sha: ${{ steps.check_command.outputs.prHeadSha }}
      #     name: "2-checks-action test"
      #     status: "completed"
      #     conclusion: "success"


  run_test:
    needs: [pr_commented]
    if: ${{ needs.pr_commented.outputs.command == 'run-tests' && needs.pr_commented.outputs.nonDocsChanges == true}}
    name: Deploy PR
    uses: ./.github/workflows/fake-extended-3.yml
    with:
      prRef: "refs/pull/${{ github.event.issue.number }}/merge"
      test1: something
      prHeadSha: ${{ needs.pr_commented.outputs.prHeadSha }}
      boolTest1: true
      boolTest2: false
      # prRef: ${{ needs.pr_commented.outputs.potentialMergeCommit }}
      # # prRef: ${{ needs.pr_commented.outputs.prRef }}
      # # prRepo: ${{ needs.pr_commented.outputs.prRepo }}
    secrets:
      SOMETHING_SECRET: ${{ secrets.SOMETHING_SECRET }}
